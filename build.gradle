description = 'Gradle wrapper for OpenSSL build'

apply plugin: 'base'
apply plugin: 'ivy-publish'

buildscript {
    ext.svtFunctionsVersion = '6.0.+'
    ext.osPackageVersion = '4.4.0'

    repositories {
        mavenLocal()
        maven {
            name "ArtifactoryRepo"
            // see gradle.properties
            url artifactoryUrl
        }
    }

    dependencies {
        classpath "com.simplivity.gradle.plugins:gradle-svtfunctions-plugin:$svtFunctionsVersion"
        classpath "com.netflix.nebula:gradle-ospackage-plugin:$osPackageVersion"
    }
}

group = "openssl"

apply plugin: 'com.simplivity.svt-functions'

import groovyx.net.http.ContentType
import java.security.MessageDigest
import org.jfrog.artifactory.client.*
import org.jfrog.artifactory.client.impl.*
import org.jfrog.artifactory.client.model.impl.FileImpl

def computeDigests(File debFile) {
    def md5 = MessageDigest.getInstance('MD5')
    def sha1 = MessageDigest.getInstance('SHA-1')
    def sha256 = MessageDigest.getInstance('SHA-256')

    debFile.eachByte(4096) { bytes, size ->
        md5.update(bytes, 0, size)
        sha1.update(bytes, 0, size)
        sha256.update(bytes, 0, size)
    }

    md5 = md5.digest().collect { String.format('%02x', it) }.join()
    sha1 = sha1.digest().collect { String.format('%02x', it) }.join()
    sha256 = sha256.digest().collect { String.format('%02x', it) }.join()

    return [ md5, sha1, sha256 ]
}

def publishDebianToArtifactoryRepo(File debFile, String repo) {
    def (md5, sha1, sha256) = computeDigests(debFile)
    def headers = [ 'X-Checksum-Md5': md5, 'X-Checksum-Sha1': sha1, 'X-Checksum-Sha256': sha256 ]
    def hashDir = debFile.name.substring(0,1)
    def uploadPath = "/${repo}/pool/omnistack/${hashDir}/${debFile.name};deb.distribution=svt-trusty;deb.component=omnistack;deb.architecture=amd64"

    Artifactory artifactory = ArtifactoryClient.create(artifactoryContextUrl, artifactory_user, artifactory_password)

    debFile.withInputStream { content ->
        def uploaded = artifactory.put(uploadPath, [:], ContentType.JSON, FileImpl, ContentType.BINARY, content, headers, debFile.length())
        println uploaded.downloadUri
    }
}

// Lifecycle task is a no-op on Windows, needs to exist for Matrix builds.
def publishDeb = tasks.create(name: 'publishDeb', group: 'Build') {
    description = 'Publish the Debian Archives to Artifactory'
    enabled = currentOs.linux
}

if (currentOs.linux) {
    apply plugin: "nebula.ospackage-base"

    ext.buildPlatform = 'linux_x64'

    // Linux builds generate both static and shared libraries in one execution
    [ 'Debug', 'Release' ].each { mode ->
        tasks.create(name: "makeLinux${mode}", type: Exec, group: 'Build') {
            description = "Generates the Linux ${mode} configuration"
            outputs.dir file("$buildDir/${mode}")

            environment BUILD_DIR: buildDir
            executable 'util/buildFOM.sh'
            args mode
        }

        [ 'Shared', 'Static' ].each { type ->
            tasks.create(name: "assemble${type}${mode}Nar", type: Zip, group: 'Build') {
                description = "Assembles a zip archive containing the OpenSSL Linux ${type} ${mode} library."
                dependsOn "makeLinux${mode}"
                project.assemble.dependsOn it

                baseName = 'openssl'
                classifier = "linux_x64-${type.toLowerCase()}-${mode.toLowerCase()}"
                extension = 'nar'
                destinationDir = file("$buildDir/distributions")

                into('include') {
                    from "$buildDir/${mode}/openssl-install/usr/include"
                    from "$buildDir/${mode}/fips-install/include"
                    fileMode 0644
                }
                into('bin') {
                    from "$buildDir/${mode}/openssl-install/usr/bin"
                    fileMode 0755
                }
                into('lib') {
                    from("$buildDir/${mode}/openssl-install/usr/lib/x86_64-linux-gnu") {
                        if (type == 'Static') {
                            include 'lib*.a'
                        } else {
                            include 'lib*.so', 'lib*.so.*'
                        }
                    }
                    if (type == 'Static') {
                        from("$buildDir/${mode}/fips-install/lib") {
                            include 'fipscanister.*'
                        }
                    }
                    fileMode 0755
                }
            }
        }

        def buildDeb = tasks.create(name: "buildDeb${mode}", type: Deb, group: 'Build') {
            description = "Assembles a Debian archive containing the OpenSSL Linux ${mode} library."
            dependsOn "makeLinux${mode}"
            project.assemble.dependsOn it

            packageName = (mode == 'Debug') ? 'svt-openssl-fips-dbg' : 'svt-openssl-fips'

            description 'SVT OpenSSL FIPS Debian package ($mode)'
            distribution 'svt-trusty'
            arch 'amd64'
            priority 'required'

            includeEmptyDirs = false
            user 'root'

            def installBaseDir = '/usr/share/svt-openssl-fips'
            into("$installBaseDir/include") {
                from "$buildDir/${mode}/openssl-install/usr/include"
                from "$buildDir/${mode}/fips-install/include"
                fileMode 0644
            }
            into("$installBaseDir/bin") {
                from "$buildDir/${mode}/openssl-install/usr/bin"
                fileMode 0755
            }
            into("$installBaseDir/lib") {
                from "$buildDir/${mode}/openssl-install/usr/lib"
            }
        }

        tasks.create(name: "publishDeb${mode}", group: 'Build') {
            description = "Publishes the Debian archive for OpenSSL Linux ${mode} library to Artifactory"
            dependsOn buildDeb
            publishDeb.dependsOn it

            doLast {
                publishDebianToArtifactoryRepo(buildDeb.archivePath, debianRepo)
            }
        }

        // OpenSSL Engines are created separately in the lib/engines directory and
        // only for the shared library mode. Package them separately.
        tasks.create(name: "assemble${mode}Engines", type: Zip, group: 'Build') {
            description = "Assembles a zip archive of the FIPS crypto engines for ${mode} builds."
            dependsOn "makeLinux${mode}"
            project.assemble.dependsOn it

            baseName = "openssl"
            classifier = "${buildPlatform}-engines-${mode.toLowerCase()}"
            extension = 'zip'
            destinationDir = file("$buildDir/distributions")

            into('lib') {
                from("$buildDir/${mode}/openssl-install/usr/lib/x86_64-linux-gnu") {
                    include 'engines/*.so'
                }
                fileMode 0755
            }
        }

        // We only need the Static flavor of these tools to properly process the FIPS builds.
        tasks.create(name: "assemble${mode}FipsTools", type: Zip, group: 'Build') {
            description = "Assembles a zip archive of the FIPS tools and sources for ${mode} builds."
            dependsOn "makeLinux${mode}"
            project.assemble.dependsOn it

            baseName = "openssl"
            classifier = "${buildPlatform}-fips-tools-${mode.toLowerCase()}"
            extension = 'zip'
            destinationDir = file("$buildDir/distributions")

            into('bin') {
                from "$buildDir/${mode}/fips-install/bin"
                fileMode 0755
            }
            into('src') {
                from("$buildDir/${mode}/fips-install/lib") {
                    include 'fips_premain.*'
                }
                fileMode 0644
            }
        }
    }
} else {
    ext.buildPlatform = 'windows_x64'
    [ 'Debug', 'Release' ].each { mode ->
        [ 'Shared', 'Static' ].each { type ->
            tasks.create(name: "makeWindows${type}${mode}", type: Exec, group: 'Build') {
                description = "Generates the Windows ${type} ${mode} configuration"
                outputs.dir file("$buildDir/${type}/${mode}")

                workingDir projectDir
                environment BUILD_DIR: buildDir
                executable 'util/buildFOM.bat'
                args type, mode
            }

            tasks.create(name: "assemble${type}${mode}Nar", type: Zip, group: "Build") {
                description = "Assembles a zip archive containing the OpenSSL Windows ${type} ${mode} library."
                dependsOn "makeWindows${type}${mode}"
                project.assemble.dependsOn it

                baseName = 'openssl'
                classifier = "${buildPlatform}-${type.toLowerCase()}-${mode.toLowerCase()}"
                extension = 'nar'
                destinationDir = file("$buildDir/distributions")

                into('include') {
                    from "$buildDir/${type}/${mode}/openssl-install/include"
                    from "$buildDir/${type}/${mode}/fips-install/include"
                }
                into('bin') {
                    from "$buildDir/${type}/${mode}/openssl-install/bin"
                    include '*.exe'
                }
                into('lib') {
                    from("$buildDir/${type}/${mode}/openssl-install/lib") {
                        include '*.lib'
                    }
                    if (type == 'Static') {
                        from("$buildDir/${type}/${mode}/fips-install/lib") {
                            include 'fipscanister.lib*'
                        }
                    } else {
                        from("$buildDir/${type}/${mode}/openssl-install/bin") {
                            include '*.dll'
                        }
                    }
                }
            }
        }

        // OpenSSL Engines are created separately in the lib/engines directory and
        // only for the shared library mode. Package them separately.
        tasks.create(name: "assemble${mode}Engines", type: Zip, group: 'Build') {
            description = "Assembles a zip archive of the FIPS crypto engines for ${mode} builds."
            dependsOn "makeWindowsShared${mode}"
            project.assemble.dependsOn it

            baseName = "openssl"
            classifier = "${buildPlatform}-engines-${mode.toLowerCase()}"
            extension = 'zip'
            destinationDir = file("$buildDir/distributions")

            into('lib') {
                from("$buildDir/Shared/${mode}/openssl-install/lib") {
                    include 'engines/*.dll'
                }
            }
        }

        // We only need the Static flavor of these tools to properly process the FIPS builds.
        tasks.create(name: "assemble${mode}FipsTools", type: Zip, group: 'Build') {
            description = "Assembles a zip archive of the FIPS tools and sources for ${mode} builds."
            dependsOn "makeWindowsStatic${mode}"
            project.assemble.dependsOn it

            baseName = "openssl"
            classifier = "${buildPlatform}-fips-tools-${mode.toLowerCase()}"
            extension = 'zip'
            destinationDir = file("$buildDir/distributions")

            into('bin') {
                from("$buildDir/Static/${mode}/fips-install/bin") {
                    include '*.exe', '*.pl', 'msincore'
                }
            }
            into('src') {
                from("$buildDir/Static/${mode}/fips-install/lib") {
                    include 'fips_premain.*'
                }
            }
        }
    }
}

publishing {
    publications {
        OpenSSLNar(IvyPublication) {
            module 'openssl'
            configurations {
                "${buildPlatform}-static-debug" {}
                "${buildPlatform}-static-release" {}
                "${buildPlatform}-shared-debug" {}
                "${buildPlatform}-shared-release" {}
                "${buildPlatform}-fips-tools-debug" {}
                "${buildPlatform}-fips-tools-release" {}
                "${buildPlatform}-engines-debug" {}
                "${buildPlatform}-engines-release" {}
                "default" {}
            }
            artifact(assembleStaticDebugNar) {
                conf "${buildPlatform}-static-debug"
            }
            artifact(assembleStaticReleaseNar) {
                conf "${buildPlatform}-static-release"
            }
            artifact(assembleSharedDebugNar) {
                conf "${buildPlatform}-shared-debug"
            }
            artifact(assembleSharedReleaseNar) {
                conf "${buildPlatform}-shared-release"
            }
            artifact(assembleDebugFipsTools) {
                conf "${buildPlatform}-fips-tools-debug"
            }
            artifact(assembleReleaseFipsTools) {
                conf "${buildPlatform}-fips-tools-release"
            }
            artifact(assembleDebugEngines) {
                conf "${buildPlatform}-engines-debug"
            }
            artifact(assembleReleaseEngines) {
                conf "${buildPlatform}-engines-release"
            }
            descriptor.withXml {
                asNode().info[0].appendNode('description', 'openssl library')
            }
        }
    }
}
